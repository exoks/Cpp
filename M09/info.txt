

				<std::map Container>

=>	propertise of map:
- An associative container that containes key-value paires with unique keys (Sorted)
- A user-provided compare can be supplied to change the ordering by user.
- complixty of (search, removal, insertion) times are logarithmic.
- Usually implmented as RB (red-black) Trees.

=>	map functions:
- size() : number of nods
- initializer list = {pair{key, value}, paire{key, value}, paire{key, value}, ...}
- [key] : subscript operator, at(key). [key] the key is not an int only it can be any data type including string
- clear()
- count(), find() (find return an iterator to that key)
- empty()
- erase(iter pos), removes element at position and return iterator to next one.
  erase(iter pos1, iter pos2) : removes elements between pos1 and pos2 and return pointer to next one.
  erase(key) removes elements with key (if present) key, return numbers of elements removed.
- insert({, } paire), inset(it1, it2), insert(init_list{{paire1}, {paire2}, ...})
- begin(), end() return iterators.
- upper_bound(key), lower_bound(key). 


template < class Key, Class T, Class compare = std::less<Key>, class allocator = std::allocator<std::pair<const key, T> >, >
class Map


WORDS:
	- Associative (adj): making such connections, or connected in your mind with someone or something.

NOTE:
	- DO NOT FORGET TO read about read-black trees.
	- DO NOT FORGET TO read about std::allocator.


=> Ford - Jonson (merge-insert)
this algorithm is good to perfome the lowest number of comparition, but it has a lot of black sides:
	- too Slow
	- it takes a lot from memory
but it still reference to one of the best sorting algorithm when it comes to reducing number of comparison.

Pre-requisit:
	(binary search)
binary search algorithm: used in sorted array repeatedly dividing to search interval in half, the idea of binary search is to use
the information that the array is sorted and reduce the time comlexity to O(log n)
	(merget sort)
merge sort is a recursive algorithm that continously splits the array in half until it cannot be further divided.

since we understand the binary search algorithm we know that most inserting-based sorting algorthm are base on this one but as the articl
(said most of them don't take that property of binary search into account) the question is how ?

	=> Steps:

read about ford-jhonson algorithm
==========================( merge sort )============================
1|_ split the collection pairs of 2 elements and 
2|_ get the main chaine and the pand chaine

==========================( insertion )=============================
1|_ insert each element into it's right place
